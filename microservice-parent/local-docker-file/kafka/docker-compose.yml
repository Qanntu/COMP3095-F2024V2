# docker-compose -f docker-compose.yml up -d
#
# docker-compose -f docker-compose.yml -p my_custom_project_name up -d

#For example: docker-compose -f docker-compose.yml -p local up -d

# https://robert-askam.co.uk/posts/how-to-connect-mysql-workbench-to-running-mysql-inside-docker
# For docker to read and execute the mongo-init.js file, the database must NOT already exist.configs:
# That is, teh mongo-init.js file is only executed the one time, on newly initalized databases

#version: '3.9'

services:
  # Zookeeper service to co-ordinate and manage Kafka brokers (cluster)
  zookeeper:
    container_name: zookeeper
    hostname: zookeeper
    image: confluentinc/cp-zookeeper:7.5.0
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - spring


  #Kafka broker - service for handling messaging and streaming data between our microservices
  broker:
    container_name: broker
    image: confluentinc/cp-kafka:7.5.0
    ports:
      # External connections (outside Docker)
      - "9092:9092"
      # Internal connection (within Docker)
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT, PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:29092,PLAINTEXT_HOST://host.docker.internal:9092
      KAFKA_OFFSETS_TOPICS_REPLICATION_FACTOR: 1
    depends_on:
      - zookeeper
    networks:
      - spring

  # Kafka UI - service  for monitoring kafka topics
  kafka-ui:
    container_name: kafka-ui
    image: provectuslabs/kafka-ui:latest
    ports:
      - "8086:8080"
    environment:
      KAFKA_CLUSTERS_NAME: local
      KAFKA_CLUSTERS_BOOTSTRAPSERVERS: broker:29092
      KAFKA_CLUSTERS_SCHEMAREGISTRY: http:/schema-registry:8087
      #aqui lo cambie a 8081 pero decia 8087
      DYNAMIC_CONFIG_ENABLED: 'true'
    depends_on:
      - broker
    networks:
      - spring

  #schema registry service for managing kafka topics schemas.
  schema-registry:
    image: confluentinc/cp-schema-registry:7.5.0
    hostname: schema-registry
    container_name: schema-registry
    ports:
      - "8087:8081" # External port 8087 mapped to internal port 8081 to avoid conflict with mongo-express
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'broker:29092'
      SCHEMA_REGISTRY_LISTENERS: http:/0.0.0.0:8081
    depends_on:
      - broker
    networks:
      - spring


networks:
  spring:
    driver: bridge

