#------------------------------------------------------
# 1. docker-compose -p microservices-comp3095-ecommerce -f docker-compose-single.yml up -d
#  -- This command will start the containers in detached mode without rebuilding the images (if they already exist)
#
# 2. docker-compose -p microservices-comp3095-ecommerce -f docker-compose-single.yml up -d --build
#   - This command forces the rebuild of images, even if the images already exist, before starting the containers
# 
# STUDENT ID : 101470163
#------------------------------------------------------

#version: '3.9'

services:
  #################################################################
  # Keycloak ######################################################
  keycloak:
    container_name: keycloak
    hostname: keycloak
    image: quay.io/keycloak/keycloak:24.0.1
    command: [ "start-dev", "--import-realm" ]
    environment:
      DB_VENDOR: postgres
      DB_ADDR: postgres-keycloak
      DB_DATABASE: keycloak
      DB_USER: admin
      DB_PASSWORD: password
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: password
      ROOT_LOGLEVEL: DEBUG
      JBOSS_LOG_MANAGER_ROOT_LOGGER: DEBUG, stdout, FILE
    ports:
      - "8080:8080"
    volumes:
      - ./realms:/opt/keycloak/data/import
    depends_on:
      - postgres-keycloak
    networks:
      - spring

  #################################################################
  # PostgreSQL for Keycloak #######################################
  postgres-keycloak:
    image: postgres
    container_name: postgres-keycloak
    environment:
      - POSTGRES_DB=keycloak
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=password
      - PGDATA=/data/postgres
    volumes:
      - ./data/postgres:/var/lib/postgresql/data
    ports:
      - "5431:5432"
    networks:
      - spring

  #################################################################
  # API Gateway ###################################################
#  api-gateway:
#    container_name: api-gateway
#    image: api-gateway
#    build:
#      context: ./api-gateway
#      dockerfile: ./Dockerfile
#    ports:
#      - "9000:9000"
#    environment:
#      SPRING_PROFILES_ACTIVE: docker
#    depends_on:
#      - keycloak
#      - postgres-keycloak
#      - inventory-service
#      - order-service
#      - product-service
#    networks:
#      - spring

  #################################################################
  # Inventory Service #############################################
  inventory-service:
    container_name: inventory-service
    build:
      context: ./inventory-service
      dockerfile: Dockerfile
    ports:
      - "8085:8085"
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres-inventory:5432/inventory-service
      - SPRING_DATASOURCE_USERNAME=admin
      - SPRING_DATASOURCE_PASSWORD=password
      - SPRING_JPA_HIBERNATE_DDL_AUTO=none
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      - postgres-inventory
    networks:
      - spring

  #################################################################
  # Order Service #################################################
#  order-service:
#    container_name: order-service
#    build:
#      context: ./order-service
#      dockerfile: Dockerfile
#    ports:
#      - "8082:8082"
#    environment:
#      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres-order:5432/order-service
#      - SPRING_DATASOURCE_USERNAME=admin
#      - SPRING_DATASOURCE_PASSWORD=password
#      - SPRING_JPA_HIBERNATE_DDL_AUTO=none
#      - SPRING_PROFILES_ACTIVE=docker
#    depends_on:
#      - postgres-order
#    networks:
#      - spring

  #################################################################
  # Product Service ###############################################
  product-service:
    container_name: product-service
    build:
      context: ./product-service
      dockerfile: Dockerfile
    ports:
      - "8084:8084"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      - mongodb
    networks:
      - spring

  #################################################################
  # MongoDB for Product Service ###################################
  mongodb:
    container_name: mongodb
    image: mongo
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=password
    volumes:
      - ./data/mongo/products:/data/db
      - ./init/mongo/docker-entrypoint-initdb.d/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js
    ports:
      - "27017:27017"
    networks:
      - spring

  #################################################################
  # PostgreSQL for Inventory Service ##############################
  postgres-inventory:
    container_name: postgres-inventory
    image: postgres
    environment:
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=inventory-service
      - PGDATA=/data/postgres
    volumes:
      - ./data/postgres/inventory:/data/postgres
    ports:
      - "5433:5432"
    networks:
      - spring

  #################################################################
  # PostgreSQL for Order Service ##################################
  postgres-order:
    container_name: postgres-order
    image: postgres
    environment:
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=order-service
      - PGDATA=/data/postgres
    volumes:
      - ./data/postgres/order:/data/postgres
    ports:
      - "5432:5432"
    networks:
      - spring

  #################################################################
  # PgAdmin #######################################################
  pgadmin:
    container_name: pgadmin
    image: dpage/pgadmin4
    ports:
      - "8888:80"
    environment:
      - PGADMIN_DEFAULT_EMAIL=user@domain.ca
      - PGADMIN_DEFAULT_PASSWORD=password
    depends_on:
      - postgres-inventory
      - postgres-order
      - postgres-keycloak
    networks:
      - spring


  mongo-express:
    image: mongo-express
    ports:
      - "8081:8081"
    environment:
      - ME_CONFIG_MONGODB_ADMINUSERNAME=admin
      - ME_CONFIG_MONGODB_ADMINPASSWORD=password
      - ME_CONFIG_MONGODB_SERVER=mongodb
    container_name: local-mongoexpress
    restart: unless-stopped
    depends_on:
      - mongodb

  ######################################################################
  # Zookeeper service to co-ordinate and manage Kafka brokers (cluster)
  zookeeper:
    container_name: zookeeper
    hostname: zookeeper
    image: confluentinc/cp-zookeeper:7.5.0
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - spring

  ###########################################################################################
  #Kafka broker - service for handling messaging and streaming data between our microservices
  broker:
    container_name: broker
    image: confluentinc/cp-kafka:7.5.0
    ports:
      # External connections (outside Docker)
      - "9092:9092"
      # Internal connection (within Docker)
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT, PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:29092,PLAINTEXT_HOST://host.docker.internal:9092
      KAFKA_OFFSETS_TOPICS_REPLICATION_FACTOR: 1
    depends_on:
      - zookeeper
    networks:
      - spring


  ##################################################
  # Kafka UI - service  for monitoring kafka topics
  kafka-ui:
    container_name: kafka-ui
    image: provectuslabs/kafka-ui:latest
    ports:
      - "8086:8080"
    environment:
      KAFKA_CLUSTERS_NAME: local
      KAFKA_CLUSTERS_BOOTSTRAPSERVERS: broker:29092
      KAFKA_CLUSTERS_SCHEMAREGISTRY: http://schema-registry:8087
      #aqui lo cambie a 8081 pero decia 8087
      DYNAMIC_CONFIG_ENABLED: 'true'
    depends_on:
      - broker
    networks:
      - spring


  ##############################################################
  #schema registry service for managing kafka topics schemas.
  schema-registry:
    image: confluentinc/cp-schema-registry:7.5.0
    hostname: schema-registry
    container_name: schema-registry
    ports:
      - "8087:8081" # External port 8087 mapped to internal port 8081 to avoid conflict with mongo-express
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'broker:29092'
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
    depends_on:
      - broker
    networks:
      - spring

networks:
  spring:
    driver: bridge